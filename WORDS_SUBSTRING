#include <vector>
#include <string>
#include <unordered_map>
#include <iostream>
using namespace std;

class Solution {
public:
    // Function to calculate character frequencies of a word
    vector<int> getCharFrequency(const string& word) {
        vector<int> freq(26, 0);
        for (char ch : word) {
            freq[ch - 'a']++;
        }
        return freq;
    }

    vector<string> wordSubsets(vector<string>& words1, vector<string>& words2) {
        vector<int> maxFreq(26, 0);

        // Compute max frequency requirements from words2
        for (const string& word : words2) {
            vector<int> freq = getCharFrequency(word);
            for (int i = 0; i < 26; ++i) {
                maxFreq[i] = max(maxFreq[i], freq[i]);
            }
        }

        // Result vector
        vector<string> result;

        // Check words in words1 against max frequency
        for (const string& word : words1) {
            vector<int> freq = getCharFrequency(word);
            bool isSubset = true;

            for (int i = 0; i < 26; ++i) {
                if (freq[i] < maxFreq[i]) {
                    isSubset = false;
                    break;
                }
            }

            if (isSubset) {
                result.push_back(word);
            }
        }

        return result;
    }
};

int main() {
    Solution sol;
    vector<string> words1 = {"amazon", "apple", "facebook", "google", "leetcode"};
    vector<string> words2 = {"e", "o"};
    vector<string> result = sol.wordSubsets(words1, words2);

    // Print the result
    for (const string& word : result) {
        cout << word << " ";
    }
    return 0;
}
